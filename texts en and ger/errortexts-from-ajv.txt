/* istanbul ignore else */
out += ' if (errors === '
out += ' if (errors === 0) return true           '
out += '  if (vErrors === null) vErrors = [err] else vErrors.push(err) errors++ '
out += 'properties ' + (it.util.escapeQuotes($deps.join(", ")))
out += 'property ' + (it.util.escapeQuotes($deps[0]))
out += ' , schema: false , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' '
out += ' , schema: ' + (it.util.toQuotedString($schema)) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' '
out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' '
out += ' var ' + ($errs) + ' = errors   '
out += 'var ' + ($errs) + ' = errorsvar ' + ($nextValid) + ' = true'
out += ' var ' + ($errs) + ' = errors var ' + ($valid) + ' = false  '
out += 'var ' + ($valid) + ' = equal(' + ($data) + ', schema' + ($lvl) + ') if (!' + ($valid) + ') {   '
out += ' var ' + ($valid) + ' = errors === errs_' + ($lvl) + ''
out += ' when property ' + (it.util.escapeQuotes($property)) + ' is present' '


'' + ($exclusiveKeyword) + ' should be boolean' '
out += 'less'
out += 'longer
out += 'more'
out += ' properties' '
out += 'self'
out += 'shorter'
out += 'should have required property '' + ($missingProperty) + '''
out += ' than '
out += 'this'


'should be '
'should be equal to constant' '
'should be equal to one of the allowed values' '
'should be multiple of '
'should be ' + ($opStr) + ' '
'should be ' + ($opStr) + ' "'
'should have '
'should have property matching pattern '' + ($missingPattern) + ''' '
'should match exactly one schema in oneOf' '
'should match format "'
'should match pattern "'
'should match some schema in anyOf' '
'should NOT be '
'should NOT be valid' '
'should NOT have '
'should NOT have additional properties' '
'should NOT have duplicate items (items ## ' + j + ' and ' + i + ' are identical)' '
'should NOT have ' + ($moreOrLess) + ' than ' + ($limit) + ' properties matching pattern "' + (it.util.escapeQuotes($pgProperty)) + '"' '
'should NOT have more than ' + ($schema.length) + ' items' '
'should pass "' + ($rule.keyword) + '" keyword validation' '
'should pass "switch" keyword validation' '


out += ' { keyword: '' + ('additionalItems') + '' , dataPath: (dataPath || '') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schema.length) + ' } '
out += ' { keyword: '' + ('additionalProperties') + '' , dataPath: (dataPath || '') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { additionalProperty: '' + ($additionalProperty) + '' } '
out += ' { keyword: '' + ('anyOf') + '' , dataPath: (dataPath || '') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} '
out += ' { keyword: '' + ('constant') + '' , dataPath: (dataPath || '') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} '
out += ' { keyword: '' + ('dependencies') + '' , dataPath: (dataPath || '') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { property: '' + (it.util.escapeQuotes($property)) + '', missingProperty: '' + ($missingProperty) + '', depsCount: ' + ($deps.length) + ', deps: '' + (it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(", "))) + '' } '
out += ' { keyword: '' + ('enum') + '' , dataPath: (dataPath || '') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { allowedValues: schema' + ($lvl) + ' } '
out += ' { keyword: '' + ($errorKeyword || 'custom') + '' , dataPath: (dataPath || '') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { keyword: '' + ($rule.keyword) + '' } '
out += ' { keyword: '' + ($errorKeyword || '_exclusiveLimit') + '' , dataPath: (dataPath || '') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} '
out += ' { keyword: '' + ($errorKeyword || '_formatExclusiveLimit') + '' , dataPath: (dataPath || '') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} '
out += ' { keyword: '' + ($errorKeyword || '_formatLimit') + '' , dataPath: (dataPath || '') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { comparison: ' + ($opExpr) + ', limit:  '
out += ' { keyword: '' + ($errorKeyword || '_limit') + '' , dataPath: (dataPath || '') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { comparison: ' + ($opExpr) + ', limit: ' + ($schemaValue) + ', exclusive: ' + ($exclusive) + ' } '
out += ' { keyword: '' + ($errorKeyword || '_limitItems') + '' , dataPath: (dataPath || '') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schemaValue) + ' } '
out += ' { keyword: '' + ($errorKeyword || '_limitLength') + '' , dataPath: (dataPath || '') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schemaValue) + ' } '
out += ' { keyword: '' + ($errorKeyword || '_limitProperties') + '' , dataPath: (dataPath || '') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schemaValue) + ' } '
out += ' { keyword: '' + ('format') + '' , dataPath: (dataPath || '') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { format:  '
out += ' { keyword: '' + ('multipleOf') + '' , dataPath: (dataPath || '') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { multipleOf: ' + ($schemaValue) + ' } '
out += ' { keyword: '' + ('not') + '' , dataPath: (dataPath || '') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} '
out += ' { keyword: '' + ('oneOf') + '' , dataPath: (dataPath || '') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} '
out += ' { keyword: '' + ('pattern') + '' , dataPath: (dataPath || '') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { pattern:  '
out += ' { keyword: '' + ('patternGroups') + '' , dataPath: (dataPath || '') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { reason: '' + ($reason) + '', limit: ' + ($limit) + ', pattern: '' + (it.util.escapeQuotes($pgProperty)) + '' } '
out += ' { keyword: '' + ('patternRequired') + '' , dataPath: (dataPath || '') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingPattern: '' + ($missingPattern) + '' } '
out += ' { keyword: '' + ('$ref') + '' , dataPath: (dataPath || '') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { ref: '' + (it.util.escapeQuotes($schema)) + '' } '
out += ' { keyword: '' + ('required') + '' , dataPath: (dataPath || '') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: '' + ($missingProperty) + '' } '
out += ' { keyword: '' + ('switch') + '' , dataPath: (dataPath || '') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { caseIndex: ' + ($caseIndex) + ' } '
out += ' { keyword: '' + ('type') + '' , dataPath: (dataPath || '') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: ''
out += ' { keyword: '' + ('uniqueItems') + '' , dataPath: (dataPath || '') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { i: i, j: j } '







$reason = 'maximum',
$reason = 'minimum'
this.message = 'validation failed'
throw new Error('id "' + id + '" resolves to more than one schema')
throw new Error('JSON.stringify')
throw new Error('options.loadSchema should be a function')
throw new Error('$ref: validation keywords used in schema at path "' + it.errSchemaPath + '"')
throw new Error('unknown format "' + $schema + '" is used in schema at path "' + it.errSchemaPath + '"')
throw new Error('"valid" option cannot be used with macro keywords')
throw new TypeError("Parameter 'url' must be a string, not " + typeof url)
var $message = 'can't resolve reference ' + $schema + ' from id ' + it.baseId
var message = 'keyword schema is invalid: ' + self.errorsText(validateSchema.errors)
var message = 'schema is invalid: ' + errorsText()

